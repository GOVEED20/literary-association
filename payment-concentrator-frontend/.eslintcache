[{"E:\\literary-association\\payment-concentrator-frontend\\src\\index.js":"1","E:\\literary-association\\payment-concentrator-frontend\\src\\App.js":"2","E:\\literary-association\\payment-concentrator-frontend\\src\\components\\Register.js":"3","E:\\literary-association\\payment-concentrator-frontend\\src\\components\\ServiceForm.js":"4","E:\\literary-association\\payment-concentrator-frontend\\src\\services\\paymentService.js":"5","E:\\literary-association\\payment-concentrator-frontend\\src\\services\\retailerService.js":"6","E:\\literary-association\\payment-concentrator-frontend\\src\\css\\registerStyles.js":"7","E:\\literary-association\\payment-concentrator-frontend\\src\\components\\Toaster.js":"8","E:\\literary-association\\payment-concentrator-frontend\\src\\components\\FormField.js":"9"},{"size":244,"mtime":1610109371076,"results":"10","hashOfConfig":"11"},{"size":450,"mtime":1612307702886,"results":"12","hashOfConfig":"11"},{"size":8959,"mtime":1612307702888,"results":"13","hashOfConfig":"11"},{"size":373,"mtime":1610146739146,"results":"14","hashOfConfig":"11"},{"size":467,"mtime":1610366359150,"results":"15","hashOfConfig":"11"},{"size":441,"mtime":1612307702890,"results":"16","hashOfConfig":"11"},{"size":770,"mtime":1612307702889,"results":"17","hashOfConfig":"11"},{"size":993,"mtime":1610356258534,"results":"18","hashOfConfig":"11"},{"size":517,"mtime":1610234835991,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"elvavt",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"E:\\literary-association\\payment-concentrator-frontend\\src\\index.js",[],["41","42"],"E:\\literary-association\\payment-concentrator-frontend\\src\\App.js",[],"E:\\literary-association\\payment-concentrator-frontend\\src\\components\\Register.js",["43"],"import React, {useEffect, useState} from \"react\";\r\nimport {getAvailableServices, getPaymentServiceRegistrationFields} from \"../services/paymentService\";\r\nimport ServiceForm from \"./ServiceForm\"\r\nimport {Button, Form as BootstrapForm} from \"react-bootstrap\";\r\nimport {logoutUser, registerRetailer} from \"../services/retailerService\";\r\nimport {\r\n    emailFieldStyle,\r\n    formStyle,\r\n    h1Style,\r\n    h4Style,\r\n    logoutBtnStyle,\r\n    mainDivStyle,\r\n    serviceDivStyle,\r\n    submitButtonStyle\r\n} from \"../css/registerStyles\";\r\nimport Toaster from \"./Toaster\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nconst Register = () => {\r\n\r\n    const history = useHistory()\r\n\r\n    const [availableServices, setAvailableServices] = useState([])\r\n    const [state, setState] = useState({})\r\n    const [checkServices, setCheckServices] = useState({})\r\n    const [formFields, setFormFields] = useState(null)\r\n    const [encryptionFields, setEncryptionFields] = useState({})\r\n    const [retailerName, setRetailerName] = useState(\"\")\r\n    const [retailerEmail, setRetailerEmail] = useState(\"\")\r\n    const [toastData, setToastData] = useState({\r\n        show: false,\r\n        message: '',\r\n        type: '',\r\n        color: ''\r\n    })\r\n\r\n    useEffect(() => {\r\n        const getPaymentServices = async () => {\r\n            setAvailableServices(await getAvailableServices())\r\n        }\r\n        getPaymentServices().then();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const createState = () => {\r\n            let newState = {...state};\r\n            let newCheckServices = {...checkServices};\r\n            let newFormFields = {...formFields};\r\n            let newEncryptionFields = {...encryptionFields}\r\n            availableServices.forEach(service => {\r\n                newState = {...newState}\r\n                newState[service] = null;\r\n                newCheckServices = {...newCheckServices}\r\n                newCheckServices[service] = false;\r\n                newFormFields = {...newFormFields}\r\n                formFields[service] = null;\r\n                newEncryptionFields[service] = {...newEncryptionFields}\r\n                newEncryptionFields[service] = []\r\n            })\r\n            setState(newState)\r\n            setCheckServices(newCheckServices)\r\n            setFormFields(newFormFields)\r\n            setEncryptionFields(newEncryptionFields)\r\n        }\r\n\r\n        createState();\r\n\r\n    }, [availableServices])\r\n\r\n    const createServiceFormState = (formFields) => {\r\n        const reducer = (accumulator, currentValue) => {\r\n            const field = currentValue.name\r\n            let value = null\r\n            switch (currentValue.validationConstraints['type']) {\r\n                case \"select\":\r\n                    if (currentValue.validationConstraints['multiple']) {\r\n                        value = []\r\n                    } else {\r\n                        value = \"\"\r\n                    }\r\n                    break\r\n                case \"checkbox\":\r\n                    value = false\r\n                    break\r\n                default:\r\n                    value = \"\"\r\n            }\r\n            const newAccumulator = {...accumulator}\r\n            newAccumulator[field] = value\r\n            return newAccumulator\r\n        }\r\n        return formFields.reduce(reducer, {})\r\n    }\r\n\r\n    const changeState = (e, serviceName) => {\r\n        const newState = {...state}\r\n        const fieldName = e.target.id\r\n        const fieldValue = e.target.value\r\n        if (Array.isArray(newState[serviceName][fieldName])) {\r\n            if (fieldValue === \"\") {\r\n                return\r\n            }\r\n\r\n            if (newState[serviceName][fieldName].includes(fieldValue)) {\r\n                newState[serviceName][fieldName] = newState[serviceName][fieldName].filter(v => v !== fieldValue)\r\n            } else {\r\n                newState[serviceName][fieldName] = [...newState[serviceName][fieldName], fieldValue]\r\n            }\r\n        } else if (typeof newState[serviceName][fieldName] === \"boolean\") {\r\n            newState[serviceName][fieldName] = !newState[serviceName][fieldName]\r\n        } else {\r\n            newState[serviceName][fieldName] = fieldValue\r\n        }\r\n        setState(newState)\r\n    }\r\n\r\n    const checkChanged = (e) => {\r\n        const serviceName = e.target.id;\r\n        const newCheckServices = {...checkServices}\r\n        newCheckServices[serviceName] = e.target.checked\r\n        setCheckServices(newCheckServices)\r\n        const newFormFields = {...formFields}\r\n        const newState = {...state}\r\n        const newEncryptionFields = {...encryptionFields}\r\n        getPaymentServiceRegistrationFields(serviceName).then(res => {\r\n            newFormFields[serviceName] = res\r\n            setFormFields(newFormFields)\r\n            newState[serviceName] = createServiceFormState(res)\r\n            setState(newState)\r\n            res.forEach(field => {\r\n                const encryptionField = {\r\n                    name: field.name,\r\n                    encrypted: field.encrypted\r\n                }\r\n                if (newEncryptionFields[serviceName].filter(e => e.name === field.name).length === 0) {\r\n                    newEncryptionFields[serviceName].push(encryptionField)\r\n                }\r\n            })\r\n            setEncryptionFields(newEncryptionFields)\r\n        })\r\n    }\r\n\r\n    const onChangeNameHandler = (e) => {\r\n        setRetailerName(e.target.value)\r\n    }\r\n\r\n    const onChangeEmailHandler = (e) => {\r\n        setRetailerEmail(e.target.value)\r\n    }\r\n\r\n    const closeToaster = (message, type) => {\r\n        setTimeout(() => {\r\n            setToastData({show: false, message: message, type: type, color: ''})\r\n        }, 3000)\r\n    }\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const retailerData = {}\r\n        retailerData['retailerName'] = retailerName\r\n        retailerData['retailerEmail'] = retailerEmail\r\n        let paymentServiceDataArray = []\r\n        availableServices.forEach(service => {\r\n            if (checkServices[service]) {\r\n                const paymentServiceData = {}\r\n                paymentServiceData['serviceName'] = service\r\n                let formFields = []\r\n                encryptionFields[service].forEach(field => {\r\n                    let regField = {\r\n                        name: field.name,\r\n                        value: state[service][field.name],\r\n                        encrypted: field.encrypted\r\n                    }\r\n                    formFields.push(regField)\r\n                })\r\n                paymentServiceData['data'] = formFields\r\n                paymentServiceDataArray.push(paymentServiceData)\r\n            }\r\n        })\r\n        retailerData['paymentServices'] = paymentServiceDataArray\r\n        registerRetailer(retailerData)\r\n            .then(res => {\r\n                setToastData({show: true, message: res, type: 'success', color: 'green'})\r\n                closeToaster(res, 'success')\r\n            })\r\n            .catch(error => {\r\n                setToastData({show: true, message: error.response.data, type: 'error', color: 'red'})\r\n                closeToaster(error.response.data, 'error')\r\n            })\r\n    }\r\n\r\n    const formatServiceName = (serviceName) => {\r\n        let formattedServiceName = serviceName.slice(0, -8)\r\n        formattedServiceName = formattedServiceName.charAt(0).toUpperCase() + formattedServiceName.slice(1)\r\n        return formattedServiceName + ' payment service'\r\n\r\n    }\r\n\r\n    const logout = async () => {\r\n        await logoutUser()\r\n        history.push('/login')\r\n    }\r\n\r\n    document.body.style.backgroundColor = \"#010d3b\"\r\n\r\n    return (\r\n        <div>\r\n            <div className={\"container\"} style={mainDivStyle}>\r\n                <h1 style={h1Style}>Retailer registration</h1>\r\n                <BootstrapForm onSubmit={(e) => onSubmit(e)} style={formStyle}>\r\n                    <BootstrapForm.Label>Retailer name: </BootstrapForm.Label>\r\n                    <BootstrapForm.Control type=\"text\" placeholder=\"Enter retailer name\"\r\n                                           onChange={(e) => onChangeNameHandler(e)}/>\r\n                    <BootstrapForm.Label style={emailFieldStyle}>Retailer email: </BootstrapForm.Label>\r\n                    <BootstrapForm.Control type=\"text\" placeholder=\"Enter retailer email\"\r\n                                           onChange={(e) => onChangeEmailHandler(e)}/>\r\n                    <h4 style={h4Style}>Payment services</h4>\r\n                    <p>Choose which payment services you will provide to customers</p>\r\n                    {\r\n                        availableServices.map((service) =>\r\n                            <div key={service} style={serviceDivStyle}>\r\n                                <BootstrapForm.Check type=\"checkbox\" id={service} label={formatServiceName(service)}\r\n                                                     onChange={(e) => checkChanged(e)}/>\r\n                                {checkServices[service] &&\r\n                                <ServiceForm\r\n                                    serviceName={service}\r\n                                    formFields={formFields[service]}\r\n                                    onChange={(e) => changeState(e, service)}/>\r\n                                }\r\n                            </div>\r\n                        )\r\n                    }\r\n                    <Button variant=\"primary\" type=\"submit\" style={submitButtonStyle}>Submit</Button>\r\n                </BootstrapForm>\r\n            </div>\r\n            <Button style={logoutBtnStyle} onClick={logout}>Logout</Button>\r\n            {toastData.show ?\r\n                <Toaster type={toastData.type} message={toastData.message} color={toastData.color}/> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;","E:\\literary-association\\payment-concentrator-frontend\\src\\components\\ServiceForm.js",[],"E:\\literary-association\\payment-concentrator-frontend\\src\\services\\paymentService.js",["44"],"import axios from 'axios';\r\n\r\nconst PC_BASE_URL = process.env.PC_BASE_URL\r\n\r\nexport const getAvailableServices = async () => {\r\n    const response = await axios.get(`http://localhost:8080/api/payment-services`)\r\n    return response.data\r\n}\r\n\r\nexport const getPaymentServiceRegistrationFields = async (serviceName) => {\r\n    const response = await axios.get(`http://localhost:8080/api/payment-services/${serviceName}/registration-fields`)\r\n    return response.data;\r\n}","E:\\literary-association\\payment-concentrator-frontend\\src\\services\\retailerService.js",[],"E:\\literary-association\\payment-concentrator-frontend\\src\\css\\registerStyles.js",[],"E:\\literary-association\\payment-concentrator-frontend\\src\\components\\Toaster.js",[],"E:\\literary-association\\payment-concentrator-frontend\\src\\components\\FormField.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":68,"column":8,"nodeType":"51","endLine":68,"endColumn":27,"suggestions":"52"},{"ruleId":"53","severity":1,"message":"54","line":3,"column":7,"nodeType":"55","messageId":"56","endLine":3,"endColumn":18},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkServices', 'encryptionFields', 'formFields', and 'state'. Either include them or remove the dependency array.","ArrayExpression",["59"],"no-unused-vars","'PC_BASE_URL' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [availableServices, checkServices, encryptionFields, formFields, state]",{"range":"62","text":"63"},[2401,2420],"[availableServices, checkServices, encryptionFields, formFields, state]"]