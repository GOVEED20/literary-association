[{"E:\\literary-association\\payment-concentrator-frontend\\src\\index.js":"1","E:\\literary-association\\payment-concentrator-frontend\\src\\App.js":"2","E:\\literary-association\\payment-concentrator-frontend\\src\\components\\Register.js":"3","E:\\literary-association\\payment-concentrator-frontend\\src\\components\\ServiceForm.js":"4","E:\\literary-association\\payment-concentrator-frontend\\src\\services\\paymentService.js":"5","E:\\literary-association\\payment-concentrator-frontend\\src\\components\\FormField.js":"6","E:\\literary-association\\payment-concentrator-frontend\\src\\services\\retailerService.js":"7","E:\\literary-association\\payment-concentrator-frontend\\src\\css\\registerStyles.js":"8"},{"size":244,"mtime":1610109371076,"results":"9","hashOfConfig":"10"},{"size":461,"mtime":1610105923508,"results":"11","hashOfConfig":"10"},{"size":7989,"mtime":1610234364760,"results":"12","hashOfConfig":"10"},{"size":373,"mtime":1610146739146,"results":"13","hashOfConfig":"10"},{"size":495,"mtime":1610151825098,"results":"14","hashOfConfig":"10"},{"size":517,"mtime":1610234835991,"results":"15","hashOfConfig":"10"},{"size":207,"mtime":1610199334076,"results":"16","hashOfConfig":"10"},{"size":770,"mtime":1610234953631,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"elvavt",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"E:\\literary-association\\payment-concentrator-frontend\\src\\index.js",[],["38","39"],"E:\\literary-association\\payment-concentrator-frontend\\src\\App.js",["40"],"import logo from './logo.svg';\nimport Register from \"./components/Register\";\nimport {Switch, Route} from \"react-router-dom\";\nimport React from \"react\";\n\nconst App = () => {\n  return (\n      <div className=\"container\">\n        <Switch>\n          <Route path=\"/register\">\n            <Register/>\n          </Route>\n          <Route path=\"*\">\n            <div>Page doesn't exist</div>\n          </Route>\n        </Switch>\n      </div>\n  );\n};\n\nexport default App;\n","E:\\literary-association\\payment-concentrator-frontend\\src\\components\\Register.js",["41"],"import React, {useEffect, useState} from \"react\";\r\nimport {getAvailableServices, getPaymentServiceRegistrationFields} from \"../services/paymentService\";\r\nimport ServiceForm from \"./ServiceForm\"\r\nimport {Button, Form as BootstrapForm} from \"react-bootstrap\";\r\nimport {registerRetailer} from \"../services/retailerService\";\r\nimport {formStyle, h1Style, h4Style, mainDivStyle, serviceDivStyle, submitButtonStyle} from \"../css/registerStyles\";\r\n\r\nconst Register = () => {\r\n\r\n    const [availableServices, setAvailableServices] = useState([])\r\n    const [state, setState] = useState({})\r\n    const [checkServices, setCheckServices] = useState({})\r\n    const [formFields, setFormFields] = useState(null)\r\n    const [encryptionFields, setEncryptionFields] = useState({})\r\n    const [retailerName, setRetailerName] = useState(\"\")\r\n\r\n    useEffect( () => {\r\n        const getPaymentServices = async () => {\r\n            setAvailableServices(await getAvailableServices())\r\n        }\r\n        getPaymentServices().then();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const createState = () => {\r\n            let newState = {...state};\r\n            let newCheckServices = {...checkServices};\r\n            let newFormFields = {...formFields};\r\n            let newEncryptionFields = {...encryptionFields}\r\n            availableServices.forEach(service => {\r\n                newState = {...newState}\r\n                newState[service] = null;\r\n                newCheckServices = {...newCheckServices}\r\n                newCheckServices[service] = false;\r\n                newFormFields = {...newFormFields}\r\n                formFields[service] = null;\r\n                newEncryptionFields[service] = {...newEncryptionFields}\r\n                newEncryptionFields[service] = []\r\n            })\r\n            setState(newState)\r\n            setCheckServices(newCheckServices)\r\n            setFormFields(newFormFields)\r\n            setEncryptionFields(newEncryptionFields)\r\n        }\r\n\r\n        createState();\r\n\r\n    }, [availableServices])\r\n\r\n    const createServiceFormState = (formFields) => {\r\n        const reducer = (accumulator, currentValue) => {\r\n            const field = currentValue.name\r\n            let value = null\r\n            switch (currentValue.validationConstraints['type']) {\r\n                case \"select\":\r\n                    if (currentValue.validationConstraints['multiple']) {\r\n                        value = []\r\n                    } else {\r\n                        value = \"\"\r\n                    }\r\n                    break\r\n                case \"checkbox\":\r\n                    value = false\r\n                    break\r\n                default:\r\n                    value = \"\"\r\n            }\r\n            const newAccumulator = {...accumulator}\r\n            newAccumulator[field] = value\r\n            return newAccumulator\r\n        }\r\n        return formFields.reduce(reducer, {})\r\n    }\r\n\r\n    const changeState = (e, serviceName) => {\r\n        const newState = {...state}\r\n        const fieldName = e.target.id\r\n        const fieldValue = e.target.value\r\n        if (Array.isArray(newState[serviceName][fieldName])) {\r\n            if (fieldValue === \"\") {\r\n                return\r\n            }\r\n\r\n            if (newState[serviceName][fieldName].includes(fieldValue)) {\r\n                newState[serviceName][fieldName] = newState[serviceName][fieldName].filter(v => v !== fieldValue)\r\n            } else {\r\n                newState[serviceName][fieldName] = [...newState[serviceName][fieldName], fieldValue]\r\n            }\r\n        } else if (typeof newState[serviceName][fieldName] === \"boolean\") {\r\n            newState[serviceName][fieldName] = !newState[serviceName][fieldName]\r\n        } else {\r\n            newState[serviceName][fieldName] = fieldValue\r\n        }\r\n        setState(newState)\r\n    }\r\n\r\n    const checkChanged = (e) => {\r\n        const serviceName = e.target.id;\r\n        const newCheckServices = {...checkServices}\r\n        newCheckServices[serviceName] = e.target.checked\r\n        setCheckServices(newCheckServices)\r\n        const newFormFields = {...formFields}\r\n        const newState = {...state}\r\n        const newEncryptionFields = {...encryptionFields}\r\n        getPaymentServiceRegistrationFields(serviceName).then(res => {\r\n            newFormFields[serviceName] = res\r\n            setFormFields(newFormFields)\r\n            newState[serviceName] = createServiceFormState(res)\r\n            setState(newState)\r\n            res.forEach(field => {\r\n                const encryptionField = {\r\n                    name: field.name,\r\n                    encrypted: field.encrypted\r\n                }\r\n                if (newEncryptionFields[serviceName].filter(e => e.name === field.name).length === 0) {\r\n                    newEncryptionFields[serviceName].push(encryptionField)\r\n                }\r\n            })\r\n            setEncryptionFields(newEncryptionFields)\r\n        })\r\n    }\r\n\r\n    const onChangeNameHandler = (e) => {\r\n        setRetailerName(e.target.value)\r\n    }\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const retailerData = {}\r\n        retailerData['retailerName'] = retailerName\r\n        let paymentServiceDataArray = []\r\n        availableServices.forEach(service => {\r\n            if (checkServices[service]) {\r\n                const paymentServiceData = {}\r\n                paymentServiceData['serviceName'] = service\r\n                let formFields = []\r\n                encryptionFields[service].forEach(field => {\r\n                    let regField = {\r\n                        name: field.name,\r\n                        value: state[service][field.name],\r\n                        encrypted: field.encrypted\r\n                    }\r\n                    formFields.push(regField)\r\n                })\r\n                paymentServiceData['data'] = formFields\r\n                paymentServiceDataArray.push(paymentServiceData)\r\n            }\r\n        })\r\n        retailerData['paymentServices'] = paymentServiceDataArray\r\n        console.log(retailerData)\r\n        await registerRetailer(retailerData)\r\n    }\r\n\r\n    const formatServiceName = (serviceName) => {\r\n        let formattedServiceName = serviceName.slice(0, -8)\r\n        formattedServiceName = formattedServiceName.charAt(0).toUpperCase() + formattedServiceName.slice(1)\r\n        return formattedServiceName + ' payment service'\r\n\r\n    }\r\n\r\n    document.body.style.backgroundColor = \"#010d3b\"\r\n\r\n    return (\r\n        <div className={\"container\"} style={mainDivStyle}>\r\n            <h1 style={h1Style}>Retailer registration</h1>\r\n            <BootstrapForm onSubmit={(e) => onSubmit(e)} style={formStyle}>\r\n                <BootstrapForm.Label>Retailer name: </BootstrapForm.Label>\r\n                <BootstrapForm.Control type=\"text\" placeholder=\"Enter retailer name\"\r\n                                       onChange={(e) => onChangeNameHandler(e)}/>\r\n                <h4 style={h4Style}>Payment services</h4>\r\n                <p>Choose which payment services you will provide to customers</p>\r\n                {\r\n                    availableServices.map((service) =>\r\n                        <div key={service} style={serviceDivStyle}>\r\n                            <BootstrapForm.Check type=\"checkbox\" id={service} label={formatServiceName(service)}\r\n                                                 onChange={(e) => checkChanged(e)}/>\r\n                            {checkServices[service] &&\r\n                                <ServiceForm\r\n                                    serviceName={service}\r\n                                    formFields={formFields[service]}\r\n                                    onChange={(e) => changeState(e, service)}/>\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n                <Button variant=\"primary\" type=\"submit\" style={submitButtonStyle}>Submit</Button>\r\n            </BootstrapForm>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;","E:\\literary-association\\payment-concentrator-frontend\\src\\components\\ServiceForm.js",[],"E:\\literary-association\\payment-concentrator-frontend\\src\\services\\paymentService.js",["42"],"import axios from 'axios';\r\n\r\nconst PC_BASE_URL = process.env.PC_BASE_URL // TODO: It gives undefined\r\n\r\nexport const getAvailableServices = async () => {\r\n    const response = await axios.get(`http://localhost:8080/api/payment-services`)\r\n    return response.data\r\n}\r\n\r\nexport const getPaymentServiceRegistrationFields = async (serviceName) => {\r\n    const response = await axios.get(`http://localhost:8080/api/payment-services/${serviceName}/registration-fields`)\r\n    return response.data;\r\n}","E:\\literary-association\\payment-concentrator-frontend\\src\\components\\FormField.js",[],"E:\\literary-association\\payment-concentrator-frontend\\src\\services\\retailerService.js",[],"E:\\literary-association\\payment-concentrator-frontend\\src\\css\\registerStyles.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":1,"column":8,"nodeType":"49","messageId":"50","endLine":1,"endColumn":12},{"ruleId":"51","severity":1,"message":"52","line":48,"column":8,"nodeType":"53","endLine":48,"endColumn":27,"suggestions":"54"},{"ruleId":"47","severity":1,"message":"55","line":3,"column":7,"nodeType":"49","messageId":"50","endLine":3,"endColumn":18},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkServices', 'encryptionFields', 'formFields', and 'state'. Either include them or remove the dependency array.","ArrayExpression",["58"],"'PC_BASE_URL' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [availableServices, checkServices, encryptionFields, formFields, state]",{"range":"61","text":"62"},[1998,2017],"[availableServices, checkServices, encryptionFields, formFields, state]"]